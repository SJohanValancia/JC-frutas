import { apiFetch } from "./api.js";

// Limpiar localStorage cuando se carga la p√°gina de login
document.addEventListener("DOMContentLoaded", () => {
  localStorage.clear();
});

document.getElementById("loginForm").addEventListener("submit", async (e) => {
  e.preventDefault();

  const username = document.getElementById("loginUsername").value.trim();
  const password = document.getElementById("loginPassword").value.trim();

  try {
    const res = await apiFetch("/auth/login", "POST", { username, password });
    alert("Inicio de sesi√≥n exitoso");

    // Limpiar localStorage antes de redirigir al dashboard
    window.localStorage.clear();

    // üîç DEBUG: Vamos a ver exactamente qu√© est√° devolviendo el servidor
    console.log("=== RESPUESTA COMPLETA DEL SERVIDOR ===");
    console.log(res);
    console.log("Tipo:", res.tipo);
    console.log("Usuario:", res.usuario);
    console.log("Alias:", res.alias);
    console.log("Admin:", res.admin);
    console.log("=== FIN DEBUG ===");

    // Verificar que res.usuario existe y no es undefined
    if (!res.usuario || res.usuario === undefined || res.usuario === "undefined") {
      console.error("‚ùå ERROR CR√çTICO: res.usuario es undefined o null");
      console.error("‚ùå Esto indica un problema en el backend");
      console.error("‚ùå Respuesta del servidor:", res);
      alert("Error cr√≠tico: El servidor no devolvi√≥ el nombre de usuario. Revisa la consola del servidor.");
      return;
    }

    if (res.tipo === 1) {
      // Administrador
      const url = `dashboard1.html?usuario=${encodeURIComponent(res.usuario)}`;
      console.log("Redirigiendo a:", url);
      window.location.href = url;
    } else if (res.tipo === 2) {
      // Subusuario
      const url = `dashboard2.html?usuario=${encodeURIComponent(res.usuario)}&admin=${encodeURIComponent(res.admin.alias)}`;
      console.log("Redirigiendo a:", url);
      window.location.href = url;
    } else if (res.tipo === 3) {
      // Super Administrador
      const url = `dashboard3.html?usuario=${encodeURIComponent(res.usuario)}`;
      console.log("Redirigiendo a super admin dashboard:", url);
      window.location.href = url;
    }
  } catch (err) {
    console.error("Error completo:", err);
    alert("Error al iniciar sesi√≥n: " + err.message);
  }

  // Agregar esta modificaci√≥n a tu script de login existente

// Funci√≥n de login modificada para manejar usuarios bloqueados
async function handleLogin(username, password) {
    try {
        console.log("üîÑ Intentando login para:", username);
        
        const response = await apiFetch("/auth/login", "POST", {
            username,
            password
        });
        
        console.log("‚úÖ Login exitoso:", response);
        
        // Guardar datos de usuario
        localStorage.setItem("userData", JSON.stringify(response));
        
        // Redirigir seg√∫n el tipo de usuario
        redirectUserByType(response, username);
        
    } catch (error) {
        console.error("‚ùå Error en login:", error);
        
        // Verificar si el error es por cuenta bloqueada
        if (error.message && error.message.includes('CUENTA_BLOQUEADA')) {
            console.log("üö´ Usuario bloqueado detectado");
            handleBlockedUser(username, error);
            return;
        }
        
        // Si es un error de respuesta JSON, intentar parsearlo
        if (error.message.startsWith('{')) {
            try {
                const errorData = JSON.parse(error.message);
                if (errorData.error === 'CUENTA_BLOQUEADA') {
                    console.log("üö´ Usuario bloqueado detectado desde JSON");
                    handleBlockedUser(username, errorData);
                    return;
                }
            } catch (parseError) {
                console.log("‚ùå Error parseando JSON de error");
            }
        }
        
        // Para otros errores, mostrar mensaje gen√©rico
        alert("‚ùå Error en el login: " + error.message);
    }
}

// Nueva funci√≥n para manejar usuarios bloqueados
function handleBlockedUser(username, errorData) {
    console.log("üö´ Redirigiendo usuario bloqueado a p√°gina de suspensi√≥n");
    
    // Guardar temporalmente el usuario bloqueado
    localStorage.setItem('blockedUser', username);
    
    // Limpiar cualquier dato de sesi√≥n anterior
    localStorage.removeItem('userData');
    localStorage.removeItem('userToken');
    
    // Mostrar mensaje de notificaci√≥n
    alert("üö´ Su cuenta ha sido suspendida. Ser√° redirigido a la p√°gina de informaci√≥n.");
    
    // Redirigir a la p√°gina de cuenta suspendida
    setTimeout(() => {
        window.location.href = `cuenta-suspendida.html?usuario=${encodeURIComponent(username)}`;
    }, 1500);
}

// Funci√≥n para redirigir usuarios seg√∫n su tipo (mantener la existente)
function redirectUserByType(userData, username) {
    switch(userData.tipo) {
        case 1: // Administrador
            window.location.href = `dashboard.html?usuario=${encodeURIComponent(username)}`;
            break;
        case 2: // Subusuario
            window.location.href = `dashboard2.html?usuario=${encodeURIComponent(username)}`;
            break;
        case 3: // Super Admin
            window.location.href = `dashboard3.html?usuario=${encodeURIComponent(username)}`;
            break;
        default:
            console.error("‚ùå Tipo de usuario desconocido:", userData.tipo);
            alert("Error: Tipo de usuario no reconocido");
            break;
    }
}

// Ejemplo de c√≥mo integrar esto en tu formulario de login existente
document.getElementById("loginForm").addEventListener("submit", async (e) => {
    e.preventDefault();
    
    const username = document.getElementById("loginName").value.trim();
    const password = document.getElementById("loginPassword").value.trim();
    
    if (!username || !password) {
        alert("‚ö†Ô∏è Por favor, completa todos los campos");
        return;
    }
    
    // Usar la nueva funci√≥n de login
    await handleLogin(username, password);
});

// Funci√≥n adicional para verificar si un usuario est√° bloqueado (opcional)
async function checkUserStatus(username) {
    try {
        const response = await apiFetch(`/auth/get-alias?usuario=${username}`, "GET");
        
        if (response.bloqueado) {
            console.log("üö´ Usuario est√° bloqueado");
            return { blocked: true, user: response };
        }
        
        return { blocked: false, user: response };
    } catch (error) {
        console.error("‚ùå Error verificando estado del usuario:", error);
        return { blocked: false, user: null };
    }
}

});

